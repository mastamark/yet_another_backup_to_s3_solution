Yet Another Backup to S3 Solution
----------------------------------

A simple problem with an infinate number of solutions - backing up my files from my local box to Somewhere Else.

In my case my "local box" is the mix of traditional datacenter servers, cloud instances, and docker hosts all of which have Stuff I Should Probably Backup.

Both because I'm always down for a challenge and because I felt that my specific needs weren't met with what I found, I spun out Yet Another Backup to S3 Solution, written in ruby.  (because my day job is a ruby shop, or... reasons.)

Essentially this set of scripts will use a control file in /etc/ to store what we are backing up and the frequency and where, as well as writing out cron files to the appropriate location to trigger the backups.  Additionally, a configure script will hanldle updating the control file with the new backup and cron entries.  All backups are created as tar files and sent to s3.  GPG encryption is supported before sending up to s3 if desired.

It's very much a work in progress.

What it can do
--------------
* Backups of files or recursively of folders or any mix into a single tar file, gpg encrypted or not on a cron-triggered schedule of hourly, daily, weekly or monthly.
* Arbitrary preflight or postflight script execution during the backup creation phase. (handy for external `docker exec` or run calls)
* Cleanup of old backups of that lineage based on a defined max quantity.

Requirements
------------
* Some sort of linux-y env
* Cron, specifically setup to with common '/etc/cron.[hourly|daily|weekly|monthly]/' style configuration
* s3cmd - http://s3tools.org/s3cmd
=> Configured with config file in ~root/.s3cfg
* Ruby (any flavor works as far as I know)
* Rubygem "ruby-s3cmd" - https://rubygems.org/gems/s3cmd
* [Optional] GPG should you want to encrypt your tarballs.

Install
--------
# Install s3cmd (eg, apt-get install s3cmd || yum install s3cmd || http://s3tools.org/download)
# Configure s3cmd config file for your host/user/box/whatever - http://s3tools.org/s3cmd-howto
# Install ruby and make sure you can use rubygems with it
$ gem install ruby-s3cmd
$ git clone git@github.com:mastamark/yet_another_backup_to_s3_solution.git ~root/ya_backup/
# Copy the files to the places you want them, or just leave scripts in ~root/ya_backup/*
=> RECOMMENDED - $ cp ./ya_back_me_up.yml /etc/

Example Usage
------------- 
#
# Configure and write out cron file for backups
#

# ./ya_configure_backups.rb \
  --bucket <s3_bucket_name> # name of your bucket in s3 \
  --backup-name <s3_backupfile_prefix> # what's the file name or prefix for this backup series (also the key in the control file yaml) \
  --max-backups <#> # what's the maximum number of backups for this series before we delete the oldest \
  --hourly|--daily|--weekly|--monthly # how often to execute backup \
  --files /files/to/,/backup.sh # csv of full paths of files to backup

# ex. - would update control file and write out cron entry to '/etc/cron.daily/' to the bucket 'yet-another-server-mail-config' with 7 tarballs max
$ ./ya_configure_backups.rb --bucket yet-another-server-mail-config --backup-name mail_config --daily --max-backups 7 --files /etc/mail,/some/other/mail/file.cf

Please see --help for full list of options.

#
# Execute backup
#

# ./ya_backup.rb \
  --bucket <s3_bucket_name> # name of our bucket we're backing up to \
  --backup-name <s3_backupfile_prefix> # what's the file name or prefix for this backup series (also the key in the control file yaml)  \
  --encrypt # gpg encryption go! \
  --encrypt-for <email,name,etc> # the name or email of the person in our gpg keyring we want to gpg encrypt this data for

# ex. - executes backups to s3 bucket 'yet-another-server-mail-config' with prefix 'mail_config' that is encrypted via gpg for user 'mark@somerwhere.com'
$ ./ya_backup.rb --bucket yet-another-server-mail-config --bucket-name mail_config --encrypt --encrypt-for mark@somewhere.com

Please see --help for full list of options.